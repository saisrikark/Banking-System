\c payment

--1) To find the maximum interest paid in a lending between two users
DROP VIEW LENDING_INT;
CREATE VIEW LENDING_INT(LEND_ID,BORROWER_ID,LENDER_ID,INT_AMT) AS 
SELECT LEND_ID,BORROWER_ID,LENDER_ID,INTEREST_RATE*PRINCIPAL_AMOUNT/100
FROM LENDING_INFO;
SELECT MAX(INT_AMT) FROM LENDING_INT;

--2) TO FIND NUMBER OF USERS HAVING A GMAIL EMAIL ACCOUNT
SELECT EMAIL_ID FROM USER_ WHERE EMAIL_ID LIKE '%@gmail.com%';
SELECT count(*) FROM USER_ WHERE EMAIL_ID LIKE '%@gmail.com%';	

--3) TO FIND THE TOTAL CREDIT SUMMED WITH DEBIT BY THE TRANSFERS OF A MERCHANT
CREATE VIEW CREDIT(CREDIT) AS
SELECT SUM(AMOUNT) FROM TRANSFER_MERCH_INFO WHERE TYPE='CREDIT';
CREATE VIEW DEBIT(DEBIT) AS
SELECT SUM(AMOUNT) FROM TRANSFER_MERCH_INFO WHERE TYPE='DEBIT';
CREATE VIEW DIFF(TOTAL) AS
SELECT SUM(CREDIT)-SUM(DEBIT) FROM CREDIT,DEBIT;
DROP VIEW CREDIT,DEBIT;
SELECT * FROM DIFF;
DROP VIEW  DIFF;

--4) Those who are borrowers as well as lenders. (May be they are making money if there is a difference in interest rate)

SELECT USER_ID, USER_NAME
FROM USER_
WHERE EXISTS(SELECT * FROM LENDING_INFO WHERE BORROWER_ID=USER_ID) AND EXISTS(SELECT * FROM LENDING_INFO WHERE LENDER_ID=USER_ID);

--5) What is the average transaction fee for amount more than 15 for C2B transaction?

SELECT AVG(TAXES)
FROM B2B_TRANSX_INFO
WHERE TAXES>=15;

--6) Users in the order of their activity, ie most number of transactions

SELECT USER_ID, USER_NAME, COUNT(*) AS "number of P2P transactions"
FROM USER_, P2P_TRANSX_INFO
WHERE (USER_ID=P2P_TRANSX_INFO.RECEIVEE_ID OR USER_ID=P2P_TRANSX_INFO.PAYEE_ID)-- OR USER_ID=C2B_TRANSX_INFO.RECEIVEE_ID OR USER_ID=C2B_TRANSX_INFO.PAYEE_ID)
GROUP BY USER_ID
ORDER BY COUNT(*) DESC;
SELECT USER_ID, USER_NAME, COUNT(*) AS "number of C2B transactions"
FROM USER_, C2B_TRANSX_INFO
WHERE (USER_ID=C2B_TRANSX_INFO.PAYEE_ID)-- OR USER_ID=C2B_TRANSX_INFO.RECEIVEE_ID OR USER_ID=C2B_TRANSX_INFO.PAYEE_ID)
GROUP BY USER_ID
ORDER BY COUNT(*) DESC;

--7) Number of user accounts, merchant accounts and their total for a particular IFSC code

CREATE VIEW total_acc AS
(SELECT BANK_IFSC_CODE as bank, COUNT(*) as "total accounts"
FROM BANK_DETAIL
GROUP BY BANK_IFSC_CODE);

CREATE VIEW user_acc AS
(SELECT BANK_IFSC_CODE as bank, COUNT(*) as "user accounts"
FROM BANK_DETAIL
WHERE CUST_TYPE='User'
GROUP BY BANK_IFSC_CODE);

CREATE VIEW merchant_acc AS
(SELECT BANK_IFSC_CODE as bank, COUNT(*) as "merchant accounts"
FROM BANK_DETAIL
WHERE CUST_TYPE='Merchant'
GROUP BY BANK_IFSC_CODE);

CREATE VIEW total_and_merch_acc AS
SELECT total_acc.bank, "merchant accounts", "total accounts"
FROM total_acc FULL OUTER JOIN merchant_acc ON total_acc.bank=merchant_acc.bank;

SELECT total_and_merch_acc.bank, "user accounts", "merchant accounts", "total accounts"
FROM user_acc FULL OUTER JOIN total_and_merch_acc ON user_acc.bank=total_and_merch_acc.bank
ORDER BY "total accounts" DESC;

DROP VIEW total_and_merch_acc;
DROP VIEW total_acc;
DROP VIEW user_acc;
DROP VIEW merchant_acc;

--8)Probable defaulters: Borrowers who currently have less balance than their debt
CREATE VIEW PROBABLE_DEF(ID,TOTAL_AMT_BORROWED) AS
SELECT BORROWER_ID,SUM(PRINCIPAL_AMOUNT) FROM (USER_ JOIN LENDING_INFO ON USER_ID=BORROWER_ID) GROUP BY BORROWER_ID;
SELECT ID,TOTAL_AMT_BORROWED,BALANCE FROM PROBABLE_DEF,USER_ WHERE ID=USER_ID AND TOTAL_AMT_BORROWED>BALANCE;
DROP VIEW PROBABLE_DEF;

--9)State wise debt
SELECT STATE,SUM(PRINCIPAL_AMOUNT)
FROM (USER_ JOIN LENDING_INFO ON USER_ID=BORROWER_ID)
GROUP BY STATE;